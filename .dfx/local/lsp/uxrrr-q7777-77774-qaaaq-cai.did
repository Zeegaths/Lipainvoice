type StreamingToken = 
 record {
   index: nat;
   resource: text;
 };
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: StreamingCallback;
                              token: StreamingToken;
                            };};
type StreamingCallbackHttpResponse = 
 record {
   body: blob;
   token: opt StreamingToken;
 };
type StreamingCallback = func (StreamingToken) ->
                          (StreamingCallbackHttpResponse) query;
type Invoice = 
 record {
   details: text;
   files: vec FileMetadata;
   id: nat;
 };
type HttpResponse = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type HttpRequest = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type FileMetadata__1 = 
 record {
   mimeType: text;
   path: text;
   size: nat;
 };
type FileMetadata = 
 record {
   mimeType: text;
   name: text;
   path: text;
   size: nat;
   uploadedAt: int;
 };
service : {
  addBadge: (name: text, description: text) -> ();
  addInvoice: (id: nat, details: text) -> ();
  addTask: (id: nat, description: text) -> ();
  getBadge: (name: text) -> (opt text) query;
  getInvoice: (id: nat) -> (opt Invoice) query;
  getInvoiceFiles: (invoiceId: nat) -> (vec FileMetadata) query;
  getTask: (id: nat) -> (opt text) query;
  httpStreamingCallback: (token: StreamingToken) ->
   (StreamingCallbackHttpResponse) query;
  http_request: (request: HttpRequest) -> (HttpResponse) query;
  initializeAuth: () -> ();
  isCurrentUserAdmin: () -> (bool) query;
  listBadges: () -> (vec record {
                           text;
                           text;
                         }) query;
  listFiles: () -> (vec FileMetadata__1) query;
  listInvoices: () -> (vec record {
                             nat;
                             Invoice;
                           }) query;
  listTasks: () -> (vec record {
                          nat;
                          text;
                        }) query;
  uploadInvoiceFile: (invoiceId: nat, fileName: text, mimeType: text, chunk:
   blob, complete: bool) -> (opt text);
}
